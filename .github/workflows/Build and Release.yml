name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    env:
      PROJECT_NAME: Skland-Auto-Sign-In
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            target-label: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            target-label: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            target-label: windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OpenSSL dev (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev

      - name: Install OpenSSL dev (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install openssl -y

      - name: Install Cross-compilation toolchain (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set OpenSSL environment variables
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
             echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
             echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
             echo "OPENSSL_DIR=C:/Program Files/OpenSSL" >> $GITHUB_ENV
             echo "OPENSSL_LIB_DIR=C:/Program Files/OpenSSL/lib/VC" >> $GITHUB_ENV
          fi

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Rename artifact
        env:
          VERSION: ${{ github.event.inputs.tag_name }}
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }} ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.target-label }}${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        env:
          VERSION: ${{ github.event.inputs.tag_name }}
        with:
          name: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.target-label }}
          path: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.target-label }}${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: Skland-Auto-Sign-In

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: ${{ env.PROJECT_NAME }} ${{ github.event.inputs.tag_name }} # Project Name + Version
          draft: false
          prerelease: false

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Upload release assets
        run: |
          for file in artifacts/*/*; do
            gh release upload ${{ steps.create_release.outputs.tag_name }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
